import streamlit as st
from pathlib import Path
from typing import Dict
import time

def load_env_template() -> Dict[str, str]:
    """Load the .env.template file to get default values and structure."""
    env_template = {}
    template_path = Path(".env.template")
    if template_path.exists():
        with open(template_path, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    env_template[key] = value
    return env_template

def load_env_file() -> Dict[str, str]:
    """Load existing .env file if it exists."""
    env_vars = {}
    env_path = Path(".env")
    if env_path.exists():
        with open(env_path, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    env_vars[key] = value
    return env_vars

def save_env_file(env_vars: Dict[str, str]) -> bool:
    """Save environment variables to .env file."""
    try:
        with open(".env", 'w') as f:
            f.write("# Environment variables for Merit Badge Manager\n")
            f.write("# Generated by Streamlit UI\n\n")
            for key, value in env_vars.items():
                f.write(f"{key}={value}\n")
        return True
    except Exception as e:
        st.error(f"Error saving .env file: {e}")
        return False

st.header("‚öôÔ∏è Environment Settings")
st.markdown("Configure your Merit Badge Manager settings:")

# Load current settings
env_template = load_env_template()
current_env = load_env_file()

# Create tabs for better organization
tab1, tab2, tab3 = st.tabs(["üè† Application", "üìä Data Import", "üîß Advanced"])

# Application Settings Tab
with tab1:
    st.subheader("Application Settings")
    st.markdown("Configure basic application preferences and behavior.")
    
    with st.form("app_settings"):
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**General Settings**")
            app_name = st.text_input(
                "Application Title",
                value="Merit Badge Manager",
                help="Customize the application name displayed in the interface"
            )
            
            theme_mode = st.selectbox(
                "Theme Mode",
                options=["Auto (System)", "Light", "Dark"],
                index=2,  # Default to Dark
                help="Choose the visual theme for the application"
            )
            
            language = st.selectbox(
                "Language",
                options=["English", "Spanish", "French"],
                index=0,
                help="Select the application language"
            )
        
        with col2:
            st.markdown("**Notifications & Updates**")
            enable_notifications = st.checkbox(
                "Enable Notifications",
                value=True,
                help="Show system notifications for important events"
            )
            
            auto_save = st.checkbox(
                "Auto-save Changes",
                value=True,
                help="Automatically save changes without manual confirmation"
            )
            
            show_tooltips = st.checkbox(
                "Show Help Tooltips",
                value=True,
                help="Display helpful tooltips throughout the interface"
            )
        
        st.markdown("---")
        col1, col2, col3 = st.columns([1, 1, 2])
        with col1:
            app_submitted = st.form_submit_button("üíæ Save Application Settings", type="primary")
        with col2:
            reset_app = st.form_submit_button("üîÑ Reset to Defaults")
        
        if app_submitted:
            with st.spinner("Saving application settings..."):
                time.sleep(1)  # Simulate save operation
                st.success("‚úÖ Application settings saved successfully!")
                st.balloons()
        
        if reset_app:
            st.warning("‚ö†Ô∏è Application settings reset to defaults")
            st.rerun()

# Data Import Settings Tab  
with tab2:
    st.subheader("Data Import Configuration")
    st.markdown("Configure data import settings and file locations.")
    
    with st.form("data_settings"):
        # Filter out backend server configuration items
        backend_server_configs = {'GITHUB_TOKEN', 'HOST', 'PORT', 'GITHUB_REPO', 'ENVIRONMENT'}
        
        # CSV File Settings
        st.markdown("**üìÅ CSV File Configuration**")
        col1, col2 = st.columns(2)
        
        env_vars = {}
        
        with col1:
            current_roster = current_env.get('ROSTER_CSV_FILE', env_template.get('ROSTER_CSV_FILE', 'roster_report.csv'))
            env_vars['ROSTER_CSV_FILE'] = st.text_input(
                "Adult Roster CSV File",
                value=current_roster,
                help="Filename for the adult roster CSV export from Scoutbook (should be in ./data directory)"
            )
        
        with col2:
            current_progress = current_env.get('MB_PROGRESS_CSV_FILE', env_template.get('MB_PROGRESS_CSV_FILE', 'merit_badge_progress.csv'))
            env_vars['MB_PROGRESS_CSV_FILE'] = st.text_input(
                "Merit Badge Progress CSV File",
                value=current_progress,
                help="Filename for the merit badge progress CSV export from Scoutbook (should be in ./data directory)"
            )
        
        st.markdown("**‚úÖ Validation Settings**")
        col1, col2 = st.columns(2)
        
        with col1:
            current_validate = current_env.get('VALIDATE_BEFORE_IMPORT', env_template.get('VALIDATE_BEFORE_IMPORT', 'true'))
            env_vars['VALIDATE_BEFORE_IMPORT'] = 'true' if st.checkbox(
                "Validate Before Import",
                value=current_validate.lower() == 'true',
                help="Perform data validation checks before importing CSV files"
            ) else 'false'
        
        with col2:
            current_reports = current_env.get('GENERATE_VALIDATION_REPORTS', env_template.get('GENERATE_VALIDATION_REPORTS', 'true'))
            env_vars['GENERATE_VALIDATION_REPORTS'] = 'true' if st.checkbox(
                "Generate Validation Reports",
                value=current_reports.lower() == 'true',
                help="Create detailed validation reports for review"
            ) else 'false'
        
        current_reports_dir = current_env.get('VALIDATION_REPORTS_DIR', env_template.get('VALIDATION_REPORTS_DIR', 'logs'))
        env_vars['VALIDATION_REPORTS_DIR'] = st.text_input(
            "Validation Reports Directory",
            value=current_reports_dir,
            help="Directory where validation reports will be saved"
        )
        
        st.markdown("---")
        col1, col2, col3 = st.columns([1, 1, 2])
        with col1:
            data_submitted = st.form_submit_button("üíæ Save Data Settings", type="primary")
        with col2:
            test_import = st.form_submit_button("üß™ Test Import Settings")
        
        if data_submitted:
            with st.spinner("Saving data import settings..."):
                if save_env_file(env_vars):
                    time.sleep(1)  # Simulate save operation
                    st.success("‚úÖ Data import settings saved successfully!")
                    st.balloons()
                else:
                    st.error("‚ùå Failed to save settings. Please check file permissions.")
        
        if test_import:
            with st.spinner("Testing import configuration..."):
                time.sleep(2)  # Simulate test operation
                st.success("‚úÖ Import configuration test completed successfully!")

# Advanced Settings Tab
with tab3:
    st.subheader("Advanced Configuration")
    st.markdown("Advanced settings for power users and system administrators.")
    
    with st.expander("üîß System Configuration", expanded=False):
        st.markdown("**Database Settings**")
        st.info("üìã Database location: `./database/merit_badge_manager.db`")
        
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üóÑÔ∏è Backup Database"):
                with st.spinner("Creating database backup..."):
                    time.sleep(2)
                    st.success("Database backup created successfully!")
        
        with col2:
            if st.button("üßπ Optimize Database"):
                with st.spinner("Optimizing database..."):
                    time.sleep(3)
                    st.success("Database optimization completed!")
    
    with st.expander("üìä Export/Import Options", expanded=False):
        st.markdown("**Data Export Settings**")
        
        export_format = st.selectbox(
            "Default Export Format",
            options=["Excel (.xlsx)", "CSV", "JSON"],
            help="Choose the default format for data exports"
        )
        
        include_metadata = st.checkbox(
            "Include Metadata in Exports",
            value=True,
            help="Include creation date, export timestamp, and other metadata"
        )
        
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üì§ Export All Data"):
                with st.spinner("Exporting data..."):
                    time.sleep(2)
                    st.success("Data export completed!")
        
        with col2:
            uploaded_file = st.file_uploader("üì• Import Configuration", type=['json'])
            if uploaded_file:
                st.success("Configuration imported successfully!")
    
    with st.expander("üö® Maintenance & Troubleshooting", expanded=False):
        st.markdown("**System Maintenance**")
        
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üîÑ Reset All Settings"):
                if st.button("‚ö†Ô∏è Confirm Reset", type="secondary"):
                    st.warning("All settings have been reset to defaults")
        
        with col2:
            if st.button("üìã Generate System Report"):
                with st.spinner("Generating system report..."):
                    time.sleep(2)
                    st.success("System report generated!")
        
        st.markdown("**Debug Information**")
        if st.checkbox("Show Debug Info"):
            st.code(f"""
Environment Variables Loaded: {len(env_template)}
Current Settings File: {'.env' if Path('.env').exists() else 'Not found'}
Template File: {'.env.template' if Path('.env.template').exists() else 'Not found'}
Database Connected: {'Yes' if Path('./database/merit_badge_manager.db').exists() else 'No'}
            """)

# Footer with helpful information
st.markdown("---")
st.markdown("**üí° Need Help?**")
col1, col2, col3 = st.columns(3)
with col1:
    st.info("üìñ Check the documentation for detailed configuration guidance")
with col2:
    st.info("üêõ Report issues on the project GitHub repository")
with col3:
    st.info("üí¨ Join the community discussion for support")