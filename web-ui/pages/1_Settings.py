import streamlit as st
from pathlib import Path
from typing import Dict

def load_env_template() -> Dict[str, str]:
    """Load the .env.template file to get default values and structure."""
    env_template = {}
    template_path = Path(".env.template")
    if template_path.exists():
        with open(template_path, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    env_template[key] = value
    return env_template

def load_env_file() -> Dict[str, str]:
    """Load existing .env file if it exists."""
    env_vars = {}
    env_path = Path(".env")
    if env_path.exists():
        with open(env_path, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    env_vars[key] = value
    return env_vars

def save_env_file(env_vars: Dict[str, str]) -> bool:
    """Save environment variables to .env file."""
    try:
        with open(".env", 'w') as f:
            f.write("# Environment variables for Merit Badge Manager\n")
            f.write("# Generated by Streamlit UI\n\n")
            for key, value in env_vars.items():
                f.write(f"{key}={value}\n")
        return True
    except Exception as e:
        st.error(f"Error saving .env file: {e}")
        return False

st.header("⚙️ Environment Settings")
st.markdown("Configure your Merit Badge Manager settings:")

# Load current settings
env_template = load_env_template()
current_env = load_env_file()

# Create form for editing settings
with st.form("env_settings"):
    st.subheader("Configuration")

    # Filter out backend server configuration items
    backend_server_configs = {'GITHUB_TOKEN', 'HOST', 'PORT', 'GITHUB_REPO', 'ENVIRONMENT'}

    # Merge template with current values
    env_vars = {}
    for key, default_value in env_template.items():
        # Skip backend server configuration items
        if key in backend_server_configs:
            continue

        current_value = current_env.get(key, default_value)

        if key in ['VALIDATE_BEFORE_IMPORT', 'GENERATE_VALIDATION_REPORTS']:
            # Boolean fields as toggles
            env_vars[key] = 'true' if st.checkbox(
                f"{key.replace('_', ' ').title()}:",
                value=current_value.lower() == 'true',
                help=f"Default: {default_value}"
            ) else 'false'
        else:
            # Regular text fields
            env_vars[key] = st.text_input(
                f"{key}:",
                value=current_value,
                help=f"Default: {default_value}"
            )

    submitted = st.form_submit_button("Save Settings")

    if submitted:
        if save_env_file(env_vars):
            st.success("Settings saved successfully!")
            st.balloons()
        else:
            st.error("Failed to save settings.")